파일 입출력(Java Application 관점)
	Stream(용량큰거 보내는 용도)이라는 연결통로를 통해 원본 데이터가 알맞는 인코딩 방식으로 전송된다.
	Byte 단위로 입출력되기 때문에 개별처리이며, 상세 연산이 필요하지 않다면
	Buffer를 사용한 입출력을 권장한다. Buffer를 사용하면 일괄처리가 가능해진다.
	(Buffer는 데이터를 임시로 저장하여 한번에 일괄처리하게 해주는 역할, 용량 작은거 전용)
	
	※ 인코딩 방식
		인코딩 방식은 완성형과 조합형이 있다.
		- 완성형 : 각, 간, 갇, 갈, 감, .... (경우의 수를 다만들어서 찾아서 사용)
		- 조합형: ㄱ + ㅏ + ㄱ ... (하나하나를 조합해서 만듬)

		조합형이 효율적이며 byte단위로 데이터를 전송할 때 고정된 byte가
		아니기 때문에 가변형 인코딩 방식을 선호 한다.
		조합형이면서 가변형인 인코딩 방식은 UTF-8이며, 전 세계에서 가장 많이
		사용되는 방식이다.

	Writer(출력)
		BufferedWriter : 버퍼를 사용한 출력 클래스
		FileWriter : 전달한 경로의 파일을 출력하기 위한 목적으로 열어준다.
			전달한 경로에 파일이 없다면 새롭게 만든 후 열어준다.(객체화를 하는순간 파일이 열림)

	Reader(입력)
		BufferedReader : 버퍼를 사용한 입력 클래스
		FileReader: 전달한 경로의 파일을 입력하기 위한 목적으로 열어준다.
		전달한 경로에 파일이 없다면 FileNotFoundException이 발생한다.

	
	File(파일 정보) - 찐 파일 객체, 경로를 전달하면 정보를 다가져옴
		전달한 경로에 있는 파일의 정보를 담는 타입.
		디렉터리 생성, 해당 경로의 전체 파일 목록, 파일 삭제 등.


=============================================================================

소프트웨어 디자인 설계 패턴

▶ MVC 
	M(Model) 	-> 전달할 값을 받을 변수를 클래스에 설정해놓는것(받을 준비를하는것) 변수 + 기본생성자 + 게터세터
		DB에서 조회된 결과 값을 담기 위한 변수들이 선언된 클래스
		- 클래스명 뒤에 VO, DTO라는 문자열을 붙여준다.
		- VO(Value Object) : 테이블을 보고 그대로 만든 객체
		- DTO(Data Transfer Object) : 화면에 필요한 데이터를 담은 객체

	V(View) 	-> 화면쪽
		사용자에게 보여질 화면을 구성하는 부분
	C(Controler) 	-> ArrayList에 유저필드쪽이 Controler
		DB에 접근할 수 있는 메소드들이 선언된 클래스 -> 목록은 죄다 List로 해야된다.
		- 접근 후 결과 값이 있을 경우 Model 객체에 담은 후 처리
		- 클래스명 뒤에 DAO라는 문자열을 붙여준다.
		- DAO(Data Access Object)
	
	
	DAO (data access object)



=======================================================================
[파일 입출력 심화 실습]
1. https://koreanname.me/ 접속
2. MVC 패턴을 사용하여 표(테이블)에 접근할 수 있는 클래스 선언
3. 2개의 테이블에 있는 데이터들을 각각 2개의 메모장에 붙여넣기
4. 2개의 메모장 파일을 한 개의 메모장 파일로 병합하기

※ 이름 수에 따른 랭킹을 새롭게 추가해준다.
※ 만약 이름 수가 동일하다면 공동 순위를 부여해준다.
※ 남자아이 이름은 맨 앞에 B을 추가하고, 여자아이 이름은 맨 앞에 G를 추가한다.
   예)   G   서연   1   35,647
        B   시우   7   26,027

남자아이 DAO
   메모장의 데이터를 VO객체로 리턴하는 메소드 : setObject()

여자아이 DAO
   메모장의 데이터를 VO객체로 리턴하는 메소드 : setObject()

전체아이 DAO
   1. 파일1과 파일2를 병합 : merge()
   2. 병합된 파일에서 랭킹 수정(이름 수 순서 - 내림차순) : updateRanking()
   ※ 병합 시 두 개의 ArrayList를 하나의 ArrayList로 병합하는 방법
   ArrayList total = new ArrayList();

   ArrayList a = new ArrayList();
   ArrayList b = new ArrayList();

   total.addAll(a);
   total.addAll(b);

   ※ 중복된 이름 수 제거 : HashSet 사용
   ※ HashSet을 ArrayList로 변경
   HashSet set = new HashSet();
   ArrayList list = new ArrayList(set);
   ※ 동일한 이름 수일 경우 공동 순위로 구현한다.
   예)
   순위   이름 수
   1   15000   15000
   2   12000   12000
   3   10000   10000
   3   10000   8000
   3   10000
   6   8000








