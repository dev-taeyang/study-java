예외 처리(오류 처리) ->팅기지 않게하려고	//Exception은 모든 예외의 부모클래스이다. -> 어떤 예외가 발생할지 정 모를때 
					catch의 첫번째에 사용함 그게 아니라면 가장 마지막에 Exception을 사용해야된다.

	컴파일 시, 빌드 시, 런타임 시 오류가 발생하면, 이를 제어문으로 막을 수 있으나
	제어문으로도 막을 수 없는 오류들을 직접 처리할 수 있어야 한다.

예외 처리 문법		// 모든 예외는 클래스다. // 예외가 발생됬다는건 그 예외가 메모리에 할당됬다라는 말(주소값이 생김)
	try { 	//드라이버 열기 -> try문에서 열었으면 try문 안에서 닫아야함 (그걸 finally에서 닫음)
		예외가 발생할 수 있는 문장
		
	} catch(예외이름 객체명) {		 //예외가 발생되어 할당된 주소값을 잡아 오는것
		예외 발생 시 실행할 문장

	} catch(예외이름 객체명) {
		예외 발생 시 실행할 문장

	} ...

	} finally {		//드라이버 닫기	// 예외가 발생하던 안하던 실행하는 문장.
		예외 발생 여부에 상관없이 무조건 실행할 문장.
	}
		 ※외부 장치와 연결했을 경우 다시 닫을 때 주로 사용한다.

	try(---여기서 열고 닫아줌) {	//try Statement


	}


예외 발생
	직접 예외를 발생시키기 위해서는 예외 던지기를 사용해야 하며, 이 때에는 생성자 호출 전 throw 키워드를 사용한다.
	예) throw new BadWordException();

사용자 정의 예외
	기본적으로 제공되는 예외가 아닌 특정 상황에서 직접 예외를 만들어야 한다면, Exception 혹은 RuntimeException을 상속받아서
	예외 클래스를 선언해야 한다.
	Exception은 컴파일러가 체크를 하기 때문에 예외처리를 강제로 해야하고,
	RuntimeException은 컴파일러가 체크하지 않기 때문에 예외처리를 선택할 수 있다.

------------------------------------------------------------------------------------------------------------------------------------------------------------

API(Apllication Programming Interface) 	//어플 개발 툴
	개발에 필요한 라이브러리들의 집합.
	선배 개발자들이 만들어 놓은 소스코드

	- 내부 API
		JDK 설치 시 제공해주는 기본 API
		docs.oracle.com/javase
	- 외부 API
		선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
		보통 JAR파일로 배포하며 자바 프로젝트의 build path에 추가하여 사용할 수 있다.

JAR 파일로 배포하기
  	 배포할 클래스 또는 패키지 우클릭
  	 > Export > JAVA/JAR file 선택 > Next
  	 > destination을 원하는 경로로 선택
   	> Export Java source files... 체크
   	> Finish

JAR 파일을 프로젝트에 추가하기
   	배포된 JAR파일을 다운 받기
  	 > 프로젝트 우클릭 > Build Path > Configure Build Path
  	 > Libraries 탭 클릭 > ClassPath(안되면 ModulePath) 클릭 > Add External JARs
  	 > 저장된 경로의 .jar파일을 더블 클릭으로 추가 > Apply 클릭
  	 > Orders and Exports 탭 클릭
   	> Select All 클릭 > Apply and Close


-----------------------------문자발송할때-----------------------------------------------
API 키 : NCSQL6MBUJERYBLA
API 시크릿 : OXA8GH2AJ2WKSNI2YIKRFLTFISCNGOFW

---------------------------------------------------------------------------------------------


Object 클래스	// 클레스를 만들자 마자 기본적으로 부모클래스로 선언됨.

	1. toString()		// 재정의하는거 연습해라!!!
		항상 객체명을 출력할 때에는 toString()을 붙여서 출력해준다.
		따라서 객체명만 출력메소드에 전달하더라도 toString() 문자열 값이 출력된다.
		기본적으로 Object에서는 소속과 필드 주소를 문자열로 리턴해주지만,
		실사용에서는 불필요한 정보이기 떄문에, 재정의한 뒤 필드의 정보를 확인하도록 구현한다.
		실무에서는 클래스 선언 시 각 필드의 초기화 여부를 확인하기 위해 toString()을 재정의하여 사용한다.	
	2.  eqauls()	// == (주소비교), equals() (주소비교)
		주소값 비교 (==)
		String 클래스에서 equals()를 값 비교로 재정의하여 사용하기 때문에
		문자열 비교는 무조건 equals()로 비교한다.
		
	3. hashCode()	//주소값(주소값을 변형시켜서 중복없는 값으로 변경시킨 값. 통상적으로 hashCode를 주소값이라고 함.) 
			-> 자바에서는 실제 메모리 주소를 쓰지 않음. , C언어에서는 포인터
		JVM에서 관리하는 중복 없는 값. 실제 메모리에 할당되는 주소와 다르다.
		String 클래스에서는 필드의 해시코드 값이 아닌 문자열 상수값의 해시코드 값을
		리턴하도록 재 정의하였다.
		※ 컬렉션 프레임워크 챕터에서 재정의 목적을 이해하도록 한다.
		
-----------------------------------------------------------------------------------------------------------------------------------------------------

Wrapper Class : 기본 자료형들의 클래스 타입.(int, float, double, 등)
	
	클래스타입 객체 = new 클래스타입(일반타입의 값);  // boxing, 권장하지 않는다(Deprecated).

	클래스타입 객체 = 클래스타입.valueof(일반타입의 값); // boxing
	일반타입 변수 = 객체.000value(); // unboxing  // 000 -> int, double, float, boolean 등

	JDK4버전 이상부터는 auto를 지원한다.

	클래스타입 객체 = 일반타입의 값; // auto boxing;
	일반타입 변수 = 객체; // auto unboxing;


------------------------------------------------------------------------------------------------------------------------------------------

컬렉션 프레임워크 (데이터 수집, 틀 + 작업)	//알고리즘과 자료구조를 알고 있어야 한다.





			















